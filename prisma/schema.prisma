// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// Configurando SQLite para desenvolvimento local
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Modelos NextAuth (Para Login e Sessão) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  // ⭐️ CORRIGIDO: Removido @db.Text
  refresh_token     String? 
  // ⭐️ CORRIGIDO: Removido @db.Text
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  // ⭐️ CORRIGIDO: Removido @db.Text
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  accounts      Account[]
  sessions      Session[]
  
  courses       Course[]
  notes         Note[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Modelos da Aplicação ---

model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  progress    Int       @default(0)

  userId      String
  user        User      @relation(fields: [userId], references: [id])

  lessons     Lesson[]
}

model Lesson {
  id          String    @id @default(cuid())
  title       String
  completed   Boolean   @default(false)
  
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])

  contents    ContentBlock[]
}

model ContentBlock {
  id          String    @id @default(cuid())
  // ⭐️ CORRIGIDO: Removido @db.Text
  content     String    
  type        String
  
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
}

model Note {
    id          String    @id @default(cuid())
    // ⭐️ CORRIGIDO: Removido @db.Text
    content     String    
    courseId    String    @unique
    userId      String
    
    user        User      @relation(fields: [userId], references: [id])
}